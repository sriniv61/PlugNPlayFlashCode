
FlashWrite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d3c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002ec4  08002ec4  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ed4  08002ed4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ed4  08002ed4  00012ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002edc  08002edc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002edc  08002edc  00012edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ee0  08002ee0  00012ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000010  08002ef0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08002ef0  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bffe  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e29  00000000  00000000  0002c03a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f0  00000000  00000000  0002de68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0002e758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020ac8  00000000  00000000  0002ef88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000083d6  00000000  00000000  0004fa50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8748  00000000  00000000  00057e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012056e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002424  00000000  00000000  001205ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002eac 	.word	0x08002eac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002eac 	.word	0x08002eac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
    };
    return bb_slide(sq, truncate, obstacles, directions);
}

int main(void)
{
 80004c8:	b598      	push	{r3, r4, r7, lr}
 80004ca:	af00      	add	r7, sp, #0
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 80004cc:	f000 f95c 	bl	8000788 <HAL_Init>

  /* Configure the system clock to 168 MHz */
  SystemClock_Config();
 80004d0:	f000 f85a 	bl	8000588 <SystemClock_Config>

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 80004d4:	f000 fabc 	bl	8000a50 <HAL_FLASH_Unlock>
//      offset += 1 << (64 - SHIFT_ROOK[sq]);
//  }

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 80004d8:	f000 fadc 	bl	8000a94 <HAL_FLASH_Lock>

  /* Check if the programmed data is OK
      MemoryProgramStatus = 0: data programmed correctly
      MemoryProgramStatus != 0: number of words not programmed correctly ******/
  Address = FLASH_USER_START_ADDR;
 80004dc:	4b10      	ldr	r3, [pc, #64]	; (8000520 <main+0x58>)
 80004de:	4a11      	ldr	r2, [pc, #68]	; (8000524 <main+0x5c>)
 80004e0:	601a      	str	r2, [r3, #0]
  MemoryProgramStatus = 0;
 80004e2:	4a11      	ldr	r2, [pc, #68]	; (8000528 <main+0x60>)
 80004e4:	f04f 0300 	mov.w	r3, #0
 80004e8:	f04f 0400 	mov.w	r4, #0
 80004ec:	e9c2 3400 	strd	r3, r4, [r2]

  while (Address < FLASH_USER_END_ADDR)
 80004f0:	e00b      	b.n	800050a <main+0x42>
  {
    data32 = *(__IO uint64_t*)Address;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <main+0x58>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80004fa:	4a0c      	ldr	r2, [pc, #48]	; (800052c <main+0x64>)
 80004fc:	e9c2 3400 	strd	r3, r4, [r2]

    Address = Address + 8;
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <main+0x58>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	3308      	adds	r3, #8
 8000506:	4a06      	ldr	r2, [pc, #24]	; (8000520 <main+0x58>)
 8000508:	6013      	str	r3, [r2, #0]
  while (Address < FLASH_USER_END_ADDR)
 800050a:	4809      	ldr	r0, [pc, #36]	; (8000530 <main+0x68>)
 800050c:	f000 f814 	bl	8000538 <GetSectorSize>
 8000510:	4602      	mov	r2, r0
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <main+0x6c>)
 8000514:	4413      	add	r3, r2
 8000516:	4a02      	ldr	r2, [pc, #8]	; (8000520 <main+0x58>)
 8000518:	6812      	ldr	r2, [r2, #0]
 800051a:	4293      	cmp	r3, r2
 800051c:	d8e9      	bhi.n	80004f2 <main+0x2a>
  }

  /* Infinite loop */
  while (1)
 800051e:	e7fe      	b.n	800051e <main+0x56>
 8000520:	2000002c 	.word	0x2000002c
 8000524:	08020000 	.word	0x08020000
 8000528:	20000038 	.word	0x20000038
 800052c:	20000030 	.word	0x20000030
 8000530:	080e0000 	.word	0x080e0000
 8000534:	080dffff 	.word	0x080dffff

08000538 <GetSectorSize>:
  * @brief  Gets sector Size
  * @param  None
  * @retval The size of a given sector
  */
static uint32_t GetSectorSize(uint32_t Sector)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  uint32_t sectorsize = 0x00;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]

  if((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1) || (Sector == FLASH_SECTOR_2) || (Sector == FLASH_SECTOR_3))
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d008      	beq.n	800055c <GetSectorSize+0x24>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d005      	beq.n	800055c <GetSectorSize+0x24>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2b02      	cmp	r3, #2
 8000554:	d002      	beq.n	800055c <GetSectorSize+0x24>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b03      	cmp	r3, #3
 800055a:	d103      	bne.n	8000564 <GetSectorSize+0x2c>
  {
    sectorsize = 16 * 1024;
 800055c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	e009      	b.n	8000578 <GetSectorSize+0x40>
  }
  else if(Sector == FLASH_SECTOR_4)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b04      	cmp	r3, #4
 8000568:	d103      	bne.n	8000572 <GetSectorSize+0x3a>
  {
    sectorsize = 64 * 1024;
 800056a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	e002      	b.n	8000578 <GetSectorSize+0x40>
  }
  else
  {
    sectorsize = 128 * 1024;
 8000572:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000576:	60fb      	str	r3, [r7, #12]
  }
  return sectorsize;
 8000578:	68fb      	ldr	r3, [r7, #12]
}
 800057a:	4618      	mov	r0, r3
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
	...

08000588 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	4b2a      	ldr	r3, [pc, #168]	; (800063c <SystemClock_Config+0xb4>)
 8000594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000596:	4a29      	ldr	r2, [pc, #164]	; (800063c <SystemClock_Config+0xb4>)
 8000598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059c:	6413      	str	r3, [r2, #64]	; 0x40
 800059e:	4b27      	ldr	r3, [pc, #156]	; (800063c <SystemClock_Config+0xb4>)
 80005a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b24      	ldr	r3, [pc, #144]	; (8000640 <SystemClock_Config+0xb8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a23      	ldr	r2, [pc, #140]	; (8000640 <SystemClock_Config+0xb8>)
 80005b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b8:	6013      	str	r3, [r2, #0]
 80005ba:	4b21      	ldr	r3, [pc, #132]	; (8000640 <SystemClock_Config+0xb8>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c6:	2301      	movs	r3, #1
 80005c8:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005da:	2319      	movs	r3, #25
 80005dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005de:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e8:	2307      	movs	r3, #7
 80005ea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fc4b 	bl	8001e8c <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80005f6:	230f      	movs	r3, #15
 80005f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2302      	movs	r3, #2
 80005fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000602:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800060e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000612:	2105      	movs	r1, #5
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fea9 	bl	800236c <HAL_RCC_ClockConfig>

  /* STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported  */
  if (HAL_GetREVID() == 0x1001)
 800061a:	f000 f927 	bl	800086c <HAL_GetREVID>
 800061e:	4602      	mov	r2, r0
 8000620:	f241 0301 	movw	r3, #4097	; 0x1001
 8000624:	429a      	cmp	r2, r3
 8000626:	d105      	bne.n	8000634 <SystemClock_Config+0xac>
  {
    /* Enable the Flash prefetch */
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <SystemClock_Config+0xbc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a05      	ldr	r2, [pc, #20]	; (8000644 <SystemClock_Config+0xbc>)
 800062e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000632:	6013      	str	r3, [r2, #0]
  }
}
 8000634:	bf00      	nop
 8000636:	3750      	adds	r7, #80	; 0x50
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000
 8000644:	40023c00 	.word	0x40023c00

08000648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <HAL_MspInit+0x4c>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000656:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <HAL_MspInit+0x4c>)
 8000658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065c:	6453      	str	r3, [r2, #68]	; 0x44
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <HAL_MspInit+0x4c>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_MspInit+0x4c>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <HAL_MspInit+0x4c>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	6413      	str	r3, [r2, #64]	; 0x40
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_MspInit+0x4c>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000686:	2007      	movs	r0, #7
 8000688:	f000 f9ae 	bl	80009e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <HardFault_Handler+0x4>

080006ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <MemManage_Handler+0x4>

080006b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <BusFault_Handler+0x4>

080006b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <UsageFault_Handler+0x4>

080006be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ec:	f000 f89e 	bl	800082c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <OTG_FS_IRQHandler+0x10>)
 80006fa:	f000 f9db 	bl	8000ab4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000044 	.word	0x20000044

08000708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <SystemInit+0x28>)
 800070e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000712:	4a07      	ldr	r2, [pc, #28]	; (8000730 <SystemInit+0x28>)
 8000714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <SystemInit+0x28>)
 800071e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000722:	609a      	str	r2, [r3, #8]
#endif
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800076c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000738:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800073a:	e003      	b.n	8000744 <LoopCopyDataInit>

0800073c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800073e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000740:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000742:	3104      	adds	r1, #4

08000744 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000748:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800074a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800074c:	d3f6      	bcc.n	800073c <CopyDataInit>
  ldr  r2, =_sbss
 800074e:	4a0b      	ldr	r2, [pc, #44]	; (800077c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000750:	e002      	b.n	8000758 <LoopFillZerobss>

08000752 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000752:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000754:	f842 3b04 	str.w	r3, [r2], #4

08000758 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800075a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800075c:	d3f9      	bcc.n	8000752 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800075e:	f7ff ffd3 	bl	8000708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000762:	f002 fb7f 	bl	8002e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000766:	f7ff feaf 	bl	80004c8 <main>
  bx  lr    
 800076a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800076c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000770:	08002ee4 	.word	0x08002ee4
  ldr  r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000778:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800077c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000780:	20000308 	.word	0x20000308

08000784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC_IRQHandler>
	...

08000788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <HAL_Init+0x40>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <HAL_Init+0x40>)
 8000792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <HAL_Init+0x40>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <HAL_Init+0x40>)
 800079e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <HAL_Init+0x40>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <HAL_Init+0x40>)
 80007aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f000 f919 	bl	80009e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 f808 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007bc:	f7ff ff44 	bl	8000648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023c00 	.word	0x40023c00

080007cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x54>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_InitTick+0x58>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f923 	bl	8000a36 <HAL_SYSTICK_Config>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00e      	b.n	8000818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b0f      	cmp	r3, #15
 80007fe:	d80a      	bhi.n	8000816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000800:	2200      	movs	r2, #0
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	f000 f8f9 	bl	80009fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <HAL_InitTick+0x5c>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
 8000814:	e000      	b.n	8000818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000000 	.word	0x20000000
 8000824:	20000008 	.word	0x20000008
 8000828:	20000004 	.word	0x20000004

0800082c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_IncTick+0x20>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x24>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4413      	add	r3, r2
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <HAL_IncTick+0x24>)
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000008 	.word	0x20000008
 8000850:	20000040 	.word	0x20000040

08000854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <HAL_GetTick+0x14>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000040 	.word	0x20000040

0800086c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <HAL_GetREVID+0x14>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	0c1b      	lsrs	r3, r3, #16
}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e0042000 	.word	0xe0042000

08000884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a0:	4013      	ands	r3, r2
 80008a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b6:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	60d3      	str	r3, [r2, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <__NVIC_GetPriorityGrouping+0x18>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	f003 0307 	and.w	r3, r3, #7
}
 80008da:	4618      	mov	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	db0a      	blt.n	8000912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	490c      	ldr	r1, [pc, #48]	; (8000934 <__NVIC_SetPriority+0x4c>)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	0112      	lsls	r2, r2, #4
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	440b      	add	r3, r1
 800090c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000910:	e00a      	b.n	8000928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4908      	ldr	r1, [pc, #32]	; (8000938 <__NVIC_SetPriority+0x50>)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	f003 030f 	and.w	r3, r3, #15
 800091e:	3b04      	subs	r3, #4
 8000920:	0112      	lsls	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	440b      	add	r3, r1
 8000926:	761a      	strb	r2, [r3, #24]
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000e100 	.word	0xe000e100
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093c:	b480      	push	{r7}
 800093e:	b089      	sub	sp, #36	; 0x24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	f1c3 0307 	rsb	r3, r3, #7
 8000956:	2b04      	cmp	r3, #4
 8000958:	bf28      	it	cs
 800095a:	2304      	movcs	r3, #4
 800095c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3304      	adds	r3, #4
 8000962:	2b06      	cmp	r3, #6
 8000964:	d902      	bls.n	800096c <NVIC_EncodePriority+0x30>
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3b03      	subs	r3, #3
 800096a:	e000      	b.n	800096e <NVIC_EncodePriority+0x32>
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	f04f 32ff 	mov.w	r2, #4294967295
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43da      	mvns	r2, r3
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	401a      	ands	r2, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000984:	f04f 31ff 	mov.w	r1, #4294967295
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	fa01 f303 	lsl.w	r3, r1, r3
 800098e:	43d9      	mvns	r1, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	4313      	orrs	r3, r2
         );
}
 8000996:	4618      	mov	r0, r3
 8000998:	3724      	adds	r7, #36	; 0x24
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
	...

080009a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009b4:	d301      	bcc.n	80009ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00f      	b.n	80009da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <SysTick_Config+0x40>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c2:	210f      	movs	r1, #15
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f7ff ff8e 	bl	80008e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <SysTick_Config+0x40>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <SysTick_Config+0x40>)
 80009d4:	2207      	movs	r2, #7
 80009d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	e000e010 	.word	0xe000e010

080009e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ff47 	bl	8000884 <__NVIC_SetPriorityGrouping>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a10:	f7ff ff5c 	bl	80008cc <__NVIC_GetPriorityGrouping>
 8000a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	68b9      	ldr	r1, [r7, #8]
 8000a1a:	6978      	ldr	r0, [r7, #20]
 8000a1c:	f7ff ff8e 	bl	800093c <NVIC_EncodePriority>
 8000a20:	4602      	mov	r2, r0
 8000a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff5d 	bl	80008e8 <__NVIC_SetPriority>
}
 8000a2e:	bf00      	nop
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff ffb0 	bl	80009a4 <SysTick_Config>
 8000a44:	4603      	mov	r3, r0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000a56:	2300      	movs	r3, #0
 8000a58:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_FLASH_Unlock+0x38>)
 8000a5c:	691b      	ldr	r3, [r3, #16]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	da0b      	bge.n	8000a7a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_FLASH_Unlock+0x38>)
 8000a64:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <HAL_FLASH_Unlock+0x3c>)
 8000a66:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <HAL_FLASH_Unlock+0x38>)
 8000a6a:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <HAL_FLASH_Unlock+0x40>)
 8000a6c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_FLASH_Unlock+0x38>)
 8000a70:	691b      	ldr	r3, [r3, #16]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	da01      	bge.n	8000a7a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	40023c00 	.word	0x40023c00
 8000a8c:	45670123 	.word	0x45670123
 8000a90:	cdef89ab 	.word	0xcdef89ab

08000a94 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_FLASH_Lock+0x1c>)
 8000a9a:	691b      	ldr	r3, [r3, #16]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_FLASH_Lock+0x1c>)
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	40023c00 	.word	0x40023c00

08000ab4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 feb2 	bl	8002834 <USB_GetMode>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	f040 80ef 	bne.w	8000cb6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f001 fe96 	bl	800280e <USB_ReadInterrupts>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	f000 80e5 	beq.w	8000cb4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fe8d 	bl	800280e <USB_ReadInterrupts>
 8000af4:	4603      	mov	r3, r0
 8000af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000afe:	d104      	bne.n	8000b0a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 fe7d 	bl	800280e <USB_ReadInterrupts>
 8000b14:	4603      	mov	r3, r0
 8000b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b1e:	d104      	bne.n	8000b2a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 fe6d 	bl	800280e <USB_ReadInterrupts>
 8000b34:	4603      	mov	r3, r0
 8000b36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000b3e:	d104      	bne.n	8000b4a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fe5d 	bl	800280e <USB_ReadInterrupts>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d103      	bne.n	8000b66 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2202      	movs	r2, #2
 8000b64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 fe4f 	bl	800280e <USB_ReadInterrupts>
 8000b70:	4603      	mov	r3, r0
 8000b72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b7a:	d115      	bne.n	8000ba8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b84:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d108      	bne.n	8000ba8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f002 f8e5 	bl	8002d66 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 fe54 	bl	8002850 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 fe2e 	bl	800280e <USB_ReadInterrupts>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bbc:	d102      	bne.n	8000bc4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f001 f8f0 	bl	8001da4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fe20 	bl	800280e <USB_ReadInterrupts>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f003 0308 	and.w	r3, r3, #8
 8000bd4:	2b08      	cmp	r3, #8
 8000bd6:	d106      	bne.n	8000be6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f002 f8a8 	bl	8002d2e <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2208      	movs	r2, #8
 8000be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 fe0f 	bl	800280e <USB_ReadInterrupts>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000bfa:	d138      	bne.n	8000c6e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 fe5f 	bl	80028c4 <USB_HC_ReadInterrupt>
 8000c06:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	e025      	b.n	8000c5a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f003 030f 	and.w	r3, r3, #15
 8000c14:	68ba      	ldr	r2, [r7, #8]
 8000c16:	fa22 f303 	lsr.w	r3, r2, r3
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d018      	beq.n	8000c54 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	015a      	lsls	r2, r3, #5
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4413      	add	r3, r2
 8000c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c38:	d106      	bne.n	8000c48 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	4619      	mov	r1, r3
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f000 f858 	bl	8000cf6 <HCD_HC_IN_IRQHandler>
 8000c46:	e005      	b.n	8000c54 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 fc86 	bl	8001560 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3301      	adds	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d3d4      	bcc.n	8000c0e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fdcb 	bl	800280e <USB_ReadInterrupts>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	f003 0310 	and.w	r3, r3, #16
 8000c7e:	2b10      	cmp	r3, #16
 8000c80:	d101      	bne.n	8000c86 <HAL_HCD_IRQHandler+0x1d2>
 8000c82:	2301      	movs	r3, #1
 8000c84:	e000      	b.n	8000c88 <HAL_HCD_IRQHandler+0x1d4>
 8000c86:	2300      	movs	r3, #0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d014      	beq.n	8000cb6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	699a      	ldr	r2, [r3, #24]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f022 0210 	bic.w	r2, r2, #16
 8000c9a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f000 ffd5 	bl	8001c4c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	699a      	ldr	r2, [r3, #24]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f042 0210 	orr.w	r2, r2, #16
 8000cb0:	619a      	str	r2, [r3, #24]
 8000cb2:	e000      	b.n	8000cb6 <HAL_HCD_IRQHandler+0x202>
      return;
 8000cb4:	bf00      	nop
    }
  }
}
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d101      	bne.n	8000cd2 <HAL_HCD_Stop+0x16>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e00d      	b.n	8000cee <HAL_HCD_Stop+0x32>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 ff00 	bl	8002ae4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	460b      	mov	r3, r1
 8000d00:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	015a      	lsls	r2, r3, #5
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4413      	add	r3, r2
 8000d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	d119      	bne.n	8000d5a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	015a      	lsls	r2, r3, #5
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d32:	461a      	mov	r2, r3
 8000d34:	2304      	movs	r3, #4
 8000d36:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	015a      	lsls	r2, r3, #5
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	4413      	add	r3, r2
 8000d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	0151      	lsls	r1, r2, #5
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	440a      	add	r2, r1
 8000d4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000d52:	f043 0302 	orr.w	r3, r3, #2
 8000d56:	60d3      	str	r3, [r2, #12]
 8000d58:	e0ce      	b.n	8000ef8 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	015a      	lsls	r2, r3, #5
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4413      	add	r3, r2
 8000d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d70:	d12c      	bne.n	8000dcc <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	015a      	lsls	r2, r3, #5
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	4413      	add	r3, r2
 8000d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d7e:	461a      	mov	r2, r3
 8000d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	440b      	add	r3, r1
 8000d94:	335d      	adds	r3, #93	; 0x5d
 8000d96:	2207      	movs	r2, #7
 8000d98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	015a      	lsls	r2, r3, #5
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4413      	add	r3, r2
 8000da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	0151      	lsls	r1, r2, #5
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	440a      	add	r2, r1
 8000db0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 fd8e 	bl	80028e6 <USB_HC_Halt>
 8000dca:	e095      	b.n	8000ef8 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	015a      	lsls	r2, r3, #5
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f003 0320 	and.w	r3, r3, #32
 8000dde:	2b20      	cmp	r3, #32
 8000de0:	d109      	bne.n	8000df6 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	015a      	lsls	r2, r3, #5
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	4413      	add	r3, r2
 8000dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dee:	461a      	mov	r2, r3
 8000df0:	2320      	movs	r3, #32
 8000df2:	6093      	str	r3, [r2, #8]
 8000df4:	e080      	b.n	8000ef8 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	015a      	lsls	r2, r3, #5
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	f003 0308 	and.w	r3, r3, #8
 8000e08:	2b08      	cmp	r3, #8
 8000e0a:	d134      	bne.n	8000e76 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	015a      	lsls	r2, r3, #5
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4413      	add	r3, r2
 8000e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	0151      	lsls	r1, r2, #5
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	440a      	add	r2, r1
 8000e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8000e2c:	6879      	ldr	r1, [r7, #4]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	440b      	add	r3, r1
 8000e3a:	335d      	adds	r3, #93	; 0x5d
 8000e3c:	2205      	movs	r2, #5
 8000e3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	015a      	lsls	r2, r3, #5
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4413      	add	r3, r2
 8000e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	2310      	movs	r3, #16
 8000e50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	015a      	lsls	r2, r3, #5
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4413      	add	r3, r2
 8000e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e5e:	461a      	mov	r2, r3
 8000e60:	2308      	movs	r3, #8
 8000e62:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 fd39 	bl	80028e6 <USB_HC_Halt>
 8000e74:	e040      	b.n	8000ef8 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	015a      	lsls	r2, r3, #5
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e8c:	d134      	bne.n	8000ef8 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	015a      	lsls	r2, r3, #5
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4413      	add	r3, r2
 8000e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	0151      	lsls	r1, r2, #5
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	440a      	add	r2, r1
 8000ea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 fd14 	bl	80028e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	015a      	lsls	r2, r3, #5
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000eca:	461a      	mov	r2, r3
 8000ecc:	2310      	movs	r3, #16
 8000ece:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	440b      	add	r3, r1
 8000ede:	335d      	adds	r3, #93	; 0x5d
 8000ee0:	2208      	movs	r2, #8
 8000ee2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	015a      	lsls	r2, r3, #5
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4413      	add	r3, r2
 8000eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	015a      	lsls	r2, r3, #5
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4413      	add	r3, r2
 8000f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f0e:	d122      	bne.n	8000f56 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	015a      	lsls	r2, r3, #5
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4413      	add	r3, r2
 8000f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	0151      	lsls	r1, r2, #5
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	440a      	add	r2, r1
 8000f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 fcd3 	bl	80028e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	015a      	lsls	r2, r3, #5
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4413      	add	r3, r2
 8000f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f52:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8000f54:	e300      	b.n	8001558 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	015a      	lsls	r2, r3, #5
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	f040 80fd 	bne.w	8001168 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d01b      	beq.n	8000fae <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	440b      	add	r3, r1
 8000f84:	3348      	adds	r3, #72	; 0x48
 8000f86:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	0159      	lsls	r1, r3, #5
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	440b      	add	r3, r1
 8000f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000f9a:	1ad1      	subs	r1, r2, r3
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	4403      	add	r3, r0
 8000faa:	334c      	adds	r3, #76	; 0x4c
 8000fac:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	440b      	add	r3, r1
 8000fbc:	335d      	adds	r3, #93	; 0x5d
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	440b      	add	r3, r1
 8000fd0:	3358      	adds	r3, #88	; 0x58
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	015a      	lsls	r2, r3, #5
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4413      	add	r3, r2
 8000fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	333f      	adds	r3, #63	; 0x3f
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00a      	beq.n	8001014 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	440b      	add	r3, r1
 800100c:	333f      	adds	r3, #63	; 0x3f
 800100e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001010:	2b02      	cmp	r3, #2
 8001012:	d121      	bne.n	8001058 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	015a      	lsls	r2, r3, #5
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4413      	add	r3, r2
 800101c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	0151      	lsls	r1, r2, #5
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	440a      	add	r2, r1
 800102a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f001 fc51 	bl	80028e6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	015a      	lsls	r2, r3, #5
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4413      	add	r3, r2
 800104c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001050:	461a      	mov	r2, r3
 8001052:	2310      	movs	r3, #16
 8001054:	6093      	str	r3, [r2, #8]
 8001056:	e070      	b.n	800113a <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	440b      	add	r3, r1
 8001066:	333f      	adds	r3, #63	; 0x3f
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d12a      	bne.n	80010c4 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	015a      	lsls	r2, r3, #5
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4413      	add	r3, r2
 8001076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	0151      	lsls	r1, r2, #5
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	440a      	add	r2, r1
 8001084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001088:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800108c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	440b      	add	r3, r1
 800109c:	335c      	adds	r3, #92	; 0x5c
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	b2d8      	uxtb	r0, r3
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	440b      	add	r3, r1
 80010b4:	335c      	adds	r3, #92	; 0x5c
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4601      	mov	r1, r0
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f001 fe60 	bl	8002d82 <HAL_HCD_HC_NotifyURBChange_Callback>
 80010c2:	e03a      	b.n	800113a <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	333f      	adds	r3, #63	; 0x3f
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d12f      	bne.n	800113a <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	440b      	add	r3, r1
 80010e8:	335c      	adds	r3, #92	; 0x5c
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	440b      	add	r3, r1
 80010fc:	3350      	adds	r3, #80	; 0x50
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	f083 0301 	eor.w	r3, r3, #1
 8001104:	b2d8      	uxtb	r0, r3
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	440b      	add	r3, r1
 8001114:	3350      	adds	r3, #80	; 0x50
 8001116:	4602      	mov	r2, r0
 8001118:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	b2d8      	uxtb	r0, r3
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	440b      	add	r3, r1
 800112c:	335c      	adds	r3, #92	; 0x5c
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4601      	mov	r1, r0
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f001 fe24 	bl	8002d82 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	440b      	add	r3, r1
 8001148:	3350      	adds	r3, #80	; 0x50
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	f083 0301 	eor.w	r3, r3, #1
 8001150:	b2d8      	uxtb	r0, r3
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	440b      	add	r3, r1
 8001160:	3350      	adds	r3, #80	; 0x50
 8001162:	4602      	mov	r2, r0
 8001164:	701a      	strb	r2, [r3, #0]
}
 8001166:	e1f7      	b.n	8001558 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	015a      	lsls	r2, r3, #5
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4413      	add	r3, r2
 8001170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b02      	cmp	r3, #2
 800117c:	f040 811a 	bne.w	80013b4 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	015a      	lsls	r2, r3, #5
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4413      	add	r3, r2
 8001188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	0151      	lsls	r1, r2, #5
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	440a      	add	r2, r1
 8001196:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800119a:	f023 0302 	bic.w	r3, r3, #2
 800119e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	440b      	add	r3, r1
 80011ae:	335d      	adds	r3, #93	; 0x5d
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d10a      	bne.n	80011cc <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	440b      	add	r3, r1
 80011c4:	335c      	adds	r3, #92	; 0x5c
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
 80011ca:	e0d9      	b.n	8001380 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	440b      	add	r3, r1
 80011da:	335d      	adds	r3, #93	; 0x5d
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b05      	cmp	r3, #5
 80011e0:	d10a      	bne.n	80011f8 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	440b      	add	r3, r1
 80011f0:	335c      	adds	r3, #92	; 0x5c
 80011f2:	2205      	movs	r2, #5
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	e0c3      	b.n	8001380 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	440b      	add	r3, r1
 8001206:	335d      	adds	r3, #93	; 0x5d
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b06      	cmp	r3, #6
 800120c:	d00a      	beq.n	8001224 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	440b      	add	r3, r1
 800121c:	335d      	adds	r3, #93	; 0x5d
 800121e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001220:	2b08      	cmp	r3, #8
 8001222:	d156      	bne.n	80012d2 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	440b      	add	r3, r1
 8001232:	3358      	adds	r3, #88	; 0x58
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	1c59      	adds	r1, r3, #1
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4403      	add	r3, r0
 8001246:	3358      	adds	r3, #88	; 0x58
 8001248:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	440b      	add	r3, r1
 8001258:	3358      	adds	r3, #88	; 0x58
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b03      	cmp	r3, #3
 800125e:	d914      	bls.n	800128a <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	440b      	add	r3, r1
 800126e:	3358      	adds	r3, #88	; 0x58
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	440b      	add	r3, r1
 8001282:	335c      	adds	r3, #92	; 0x5c
 8001284:	2204      	movs	r2, #4
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	e009      	b.n	800129e <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	440b      	add	r3, r1
 8001298:	335c      	adds	r3, #92	; 0x5c
 800129a:	2202      	movs	r2, #2
 800129c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	015a      	lsls	r2, r3, #5
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4413      	add	r3, r2
 80012a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80012b4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012bc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	015a      	lsls	r2, r3, #5
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4413      	add	r3, r2
 80012c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012ca:	461a      	mov	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	e056      	b.n	8001380 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	440b      	add	r3, r1
 80012e0:	335d      	adds	r3, #93	; 0x5d
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d123      	bne.n	8001330 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	440b      	add	r3, r1
 80012f6:	335c      	adds	r3, #92	; 0x5c
 80012f8:	2202      	movs	r2, #2
 80012fa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	015a      	lsls	r2, r3, #5
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4413      	add	r3, r2
 8001304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001312:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800131a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	015a      	lsls	r2, r3, #5
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4413      	add	r3, r2
 8001324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001328:	461a      	mov	r2, r3
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e027      	b.n	8001380 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	440b      	add	r3, r1
 800133e:	335d      	adds	r3, #93	; 0x5d
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b07      	cmp	r3, #7
 8001344:	d11c      	bne.n	8001380 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	440b      	add	r3, r1
 8001354:	3358      	adds	r3, #88	; 0x58
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	1c59      	adds	r1, r3, #1
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	4403      	add	r3, r0
 8001368:	3358      	adds	r3, #88	; 0x58
 800136a:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	335c      	adds	r3, #92	; 0x5c
 800137c:	2204      	movs	r2, #4
 800137e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	015a      	lsls	r2, r3, #5
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4413      	add	r3, r2
 8001388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800138c:	461a      	mov	r2, r3
 800138e:	2302      	movs	r3, #2
 8001390:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	b2d8      	uxtb	r0, r3
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	440b      	add	r3, r1
 80013a4:	335c      	adds	r3, #92	; 0x5c
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4601      	mov	r1, r0
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f001 fce8 	bl	8002d82 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80013b2:	e0d1      	b.n	8001558 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	015a      	lsls	r2, r3, #5
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4413      	add	r3, r2
 80013bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c6:	2b80      	cmp	r3, #128	; 0x80
 80013c8:	d13e      	bne.n	8001448 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	015a      	lsls	r2, r3, #5
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4413      	add	r3, r2
 80013d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	0151      	lsls	r1, r2, #5
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	440a      	add	r2, r1
 80013e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	3358      	adds	r3, #88	; 0x58
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	1c59      	adds	r1, r3, #1
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4403      	add	r3, r0
 800140c:	3358      	adds	r3, #88	; 0x58
 800140e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	440b      	add	r3, r1
 800141e:	335d      	adds	r3, #93	; 0x5d
 8001420:	2206      	movs	r2, #6
 8001422:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	4611      	mov	r1, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f001 fa59 	bl	80028e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	015a      	lsls	r2, r3, #5
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4413      	add	r3, r2
 800143c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001440:	461a      	mov	r2, r3
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	6093      	str	r3, [r2, #8]
}
 8001446:	e087      	b.n	8001558 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	015a      	lsls	r2, r3, #5
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4413      	add	r3, r2
 8001450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	2b10      	cmp	r3, #16
 800145c:	d17c      	bne.n	8001558 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	333f      	adds	r3, #63	; 0x3f
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d122      	bne.n	80014ba <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	3358      	adds	r3, #88	; 0x58
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	015a      	lsls	r2, r3, #5
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4413      	add	r3, r2
 8001490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	0151      	lsls	r1, r2, #5
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	440a      	add	r2, r1
 800149e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014a2:	f043 0302 	orr.w	r3, r3, #2
 80014a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f001 fa17 	bl	80028e6 <USB_HC_Halt>
 80014b8:	e045      	b.n	8001546 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	440b      	add	r3, r1
 80014c8:	333f      	adds	r3, #63	; 0x3f
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00a      	beq.n	80014e6 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	333f      	adds	r3, #63	; 0x3f
 80014e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d12f      	bne.n	8001546 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	440b      	add	r3, r1
 80014f4:	3358      	adds	r3, #88	; 0x58
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d121      	bne.n	8001546 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	440b      	add	r3, r1
 8001510:	335d      	adds	r3, #93	; 0x5d
 8001512:	2203      	movs	r2, #3
 8001514:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	015a      	lsls	r2, r3, #5
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4413      	add	r3, r2
 800151e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	0151      	lsls	r1, r2, #5
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	440a      	add	r2, r1
 800152c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f001 f9d0 	bl	80028e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	015a      	lsls	r2, r3, #5
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4413      	add	r3, r2
 800154e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001552:	461a      	mov	r2, r3
 8001554:	2310      	movs	r3, #16
 8001556:	6093      	str	r3, [r2, #8]
}
 8001558:	bf00      	nop
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	015a      	lsls	r2, r3, #5
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4413      	add	r3, r2
 8001582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b04      	cmp	r3, #4
 800158e:	d119      	bne.n	80015c4 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	015a      	lsls	r2, r3, #5
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4413      	add	r3, r2
 8001598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800159c:	461a      	mov	r2, r3
 800159e:	2304      	movs	r3, #4
 80015a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	015a      	lsls	r2, r3, #5
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4413      	add	r3, r2
 80015aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	0151      	lsls	r1, r2, #5
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	440a      	add	r2, r1
 80015b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80015c2:	e33e      	b.n	8001c42 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 0320 	and.w	r3, r3, #32
 80015d6:	2b20      	cmp	r3, #32
 80015d8:	d141      	bne.n	800165e <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	015a      	lsls	r2, r3, #5
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4413      	add	r3, r2
 80015e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e6:	461a      	mov	r2, r3
 80015e8:	2320      	movs	r3, #32
 80015ea:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	333d      	adds	r3, #61	; 0x3d
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	f040 831f 	bne.w	8001c42 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	333d      	adds	r3, #61	; 0x3d
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	440b      	add	r3, r1
 8001626:	335c      	adds	r3, #92	; 0x5c
 8001628:	2202      	movs	r2, #2
 800162a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	015a      	lsls	r2, r3, #5
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4413      	add	r3, r2
 8001634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	0151      	lsls	r1, r2, #5
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	440a      	add	r2, r1
 8001642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f001 f945 	bl	80028e6 <USB_HC_Halt>
}
 800165c:	e2f1      	b.n	8001c42 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4413      	add	r3, r2
 8001666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001670:	2b40      	cmp	r3, #64	; 0x40
 8001672:	d13f      	bne.n	80016f4 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	440b      	add	r3, r1
 8001682:	335d      	adds	r3, #93	; 0x5d
 8001684:	2204      	movs	r2, #4
 8001686:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	440b      	add	r3, r1
 8001696:	333d      	adds	r3, #61	; 0x3d
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	440b      	add	r3, r1
 80016aa:	3358      	adds	r3, #88	; 0x58
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	015a      	lsls	r2, r3, #5
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4413      	add	r3, r2
 80016b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	0151      	lsls	r1, r2, #5
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	440a      	add	r2, r1
 80016c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 f903 	bl	80028e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	015a      	lsls	r2, r3, #5
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4413      	add	r3, r2
 80016e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016ec:	461a      	mov	r2, r3
 80016ee:	2340      	movs	r3, #64	; 0x40
 80016f0:	6093      	str	r3, [r2, #8]
}
 80016f2:	e2a6      	b.n	8001c42 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	015a      	lsls	r2, r3, #5
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4413      	add	r3, r2
 80016fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800170a:	d122      	bne.n	8001752 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	015a      	lsls	r2, r3, #5
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4413      	add	r3, r2
 8001714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	0151      	lsls	r1, r2, #5
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	440a      	add	r2, r1
 8001722:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001726:	f043 0302 	orr.w	r3, r3, #2
 800172a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f001 f8d5 	bl	80028e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	015a      	lsls	r2, r3, #5
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4413      	add	r3, r2
 8001744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001748:	461a      	mov	r2, r3
 800174a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800174e:	6093      	str	r3, [r2, #8]
}
 8001750:	e277      	b.n	8001c42 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	015a      	lsls	r2, r3, #5
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4413      	add	r3, r2
 800175a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b01      	cmp	r3, #1
 8001766:	d135      	bne.n	80017d4 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	3358      	adds	r3, #88	; 0x58
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	015a      	lsls	r2, r3, #5
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4413      	add	r3, r2
 8001784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	0151      	lsls	r1, r2, #5
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	440a      	add	r2, r1
 8001792:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001796:	f043 0302 	orr.w	r3, r3, #2
 800179a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 f89d 	bl	80028e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	015a      	lsls	r2, r3, #5
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4413      	add	r3, r2
 80017b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b8:	461a      	mov	r2, r3
 80017ba:	2301      	movs	r3, #1
 80017bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	335d      	adds	r3, #93	; 0x5d
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
}
 80017d2:	e236      	b.n	8001c42 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	015a      	lsls	r2, r3, #5
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4413      	add	r3, r2
 80017dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d12b      	bne.n	8001842 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	015a      	lsls	r2, r3, #5
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017f6:	461a      	mov	r2, r3
 80017f8:	2308      	movs	r3, #8
 80017fa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	015a      	lsls	r2, r3, #5
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4413      	add	r3, r2
 8001804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	0151      	lsls	r1, r2, #5
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	440a      	add	r2, r1
 8001812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f001 f85d 	bl	80028e6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	335d      	adds	r3, #93	; 0x5d
 800183c:	2205      	movs	r2, #5
 800183e:	701a      	strb	r2, [r3, #0]
}
 8001840:	e1ff      	b.n	8001c42 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	015a      	lsls	r2, r3, #5
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4413      	add	r3, r2
 800184a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	2b10      	cmp	r3, #16
 8001856:	d155      	bne.n	8001904 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	3358      	adds	r3, #88	; 0x58
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	335d      	adds	r3, #93	; 0x5d
 800187c:	2203      	movs	r2, #3
 800187e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	333d      	adds	r3, #61	; 0x3d
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d114      	bne.n	80018c0 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	333c      	adds	r3, #60	; 0x3c
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d109      	bne.n	80018c0 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	440b      	add	r3, r1
 80018ba:	333d      	adds	r3, #61	; 0x3d
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	015a      	lsls	r2, r3, #5
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4413      	add	r3, r2
 80018c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	0151      	lsls	r1, r2, #5
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	440a      	add	r2, r1
 80018d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fffb 	bl	80028e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	015a      	lsls	r2, r3, #5
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4413      	add	r3, r2
 80018f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018fc:	461a      	mov	r2, r3
 80018fe:	2310      	movs	r3, #16
 8001900:	6093      	str	r3, [r2, #8]
}
 8001902:	e19e      	b.n	8001c42 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	015a      	lsls	r2, r3, #5
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4413      	add	r3, r2
 800190c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001916:	2b80      	cmp	r3, #128	; 0x80
 8001918:	d12b      	bne.n	8001972 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	015a      	lsls	r2, r3, #5
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4413      	add	r3, r2
 8001922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	0151      	lsls	r1, r2, #5
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	440a      	add	r2, r1
 8001930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f000 ffce 	bl	80028e6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	335d      	adds	r3, #93	; 0x5d
 800195a:	2206      	movs	r2, #6
 800195c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	015a      	lsls	r2, r3, #5
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4413      	add	r3, r2
 8001966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800196a:	461a      	mov	r2, r3
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	6093      	str	r3, [r2, #8]
}
 8001970:	e167      	b.n	8001c42 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	015a      	lsls	r2, r3, #5
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4413      	add	r3, r2
 800197a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001988:	d135      	bne.n	80019f6 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	015a      	lsls	r2, r3, #5
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4413      	add	r3, r2
 8001992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	0151      	lsls	r1, r2, #5
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	440a      	add	r2, r1
 80019a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 ff96 	bl	80028e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c6:	461a      	mov	r2, r3
 80019c8:	2310      	movs	r3, #16
 80019ca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	015a      	lsls	r2, r3, #5
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4413      	add	r3, r2
 80019d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d8:	461a      	mov	r2, r3
 80019da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	335d      	adds	r3, #93	; 0x5d
 80019f0:	2208      	movs	r2, #8
 80019f2:	701a      	strb	r2, [r3, #0]
}
 80019f4:	e125      	b.n	8001c42 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	015a      	lsls	r2, r3, #5
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	f040 811a 	bne.w	8001c42 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	015a      	lsls	r2, r3, #5
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4413      	add	r3, r2
 8001a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	0151      	lsls	r1, r2, #5
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	440a      	add	r2, r1
 8001a24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a28:	f023 0302 	bic.w	r3, r3, #2
 8001a2c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	440b      	add	r3, r1
 8001a3c:	335d      	adds	r3, #93	; 0x5d
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d137      	bne.n	8001ab4 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	335c      	adds	r3, #92	; 0x5c
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	333f      	adds	r3, #63	; 0x3f
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d00b      	beq.n	8001a86 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	440b      	add	r3, r1
 8001a7c:	333f      	adds	r3, #63	; 0x3f
 8001a7e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	f040 80c5 	bne.w	8001c10 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	440b      	add	r3, r1
 8001a94:	3351      	adds	r3, #81	; 0x51
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	f083 0301 	eor.w	r3, r3, #1
 8001a9c:	b2d8      	uxtb	r0, r3
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	440b      	add	r3, r1
 8001aac:	3351      	adds	r3, #81	; 0x51
 8001aae:	4602      	mov	r2, r0
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	e0ad      	b.n	8001c10 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	335d      	adds	r3, #93	; 0x5d
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d10a      	bne.n	8001ae0 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	440b      	add	r3, r1
 8001ad8:	335c      	adds	r3, #92	; 0x5c
 8001ada:	2202      	movs	r2, #2
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	e097      	b.n	8001c10 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	440b      	add	r3, r1
 8001aee:	335d      	adds	r3, #93	; 0x5d
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d10a      	bne.n	8001b0c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	440b      	add	r3, r1
 8001b04:	335c      	adds	r3, #92	; 0x5c
 8001b06:	2202      	movs	r2, #2
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	e081      	b.n	8001c10 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	440b      	add	r3, r1
 8001b1a:	335d      	adds	r3, #93	; 0x5d
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b05      	cmp	r3, #5
 8001b20:	d10a      	bne.n	8001b38 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	440b      	add	r3, r1
 8001b30:	335c      	adds	r3, #92	; 0x5c
 8001b32:	2205      	movs	r2, #5
 8001b34:	701a      	strb	r2, [r3, #0]
 8001b36:	e06b      	b.n	8001c10 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	440b      	add	r3, r1
 8001b46:	335d      	adds	r3, #93	; 0x5d
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d00a      	beq.n	8001b64 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	440b      	add	r3, r1
 8001b5c:	335d      	adds	r3, #93	; 0x5d
 8001b5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d155      	bne.n	8001c10 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	3358      	adds	r3, #88	; 0x58
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	1c59      	adds	r1, r3, #1
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4403      	add	r3, r0
 8001b86:	3358      	adds	r3, #88	; 0x58
 8001b88:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	440b      	add	r3, r1
 8001b98:	3358      	adds	r3, #88	; 0x58
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d914      	bls.n	8001bca <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	3358      	adds	r3, #88	; 0x58
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	335c      	adds	r3, #92	; 0x5c
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	e009      	b.n	8001bde <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	335c      	adds	r3, #92	; 0x5c
 8001bda:	2202      	movs	r2, #2
 8001bdc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	015a      	lsls	r2, r3, #5
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001bf4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bfc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2302      	movs	r3, #2
 8001c20:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	b2d8      	uxtb	r0, r3
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	335c      	adds	r3, #92	; 0x5c
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4601      	mov	r1, r0
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f001 f8a0 	bl	8002d82 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	0c5b      	lsrs	r3, r3, #17
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	091b      	lsrs	r3, r3, #4
 8001c7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c80:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d003      	beq.n	8001c90 <HCD_RXQLVL_IRQHandler+0x44>
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	f000 8082 	beq.w	8001d92 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001c8e:	e083      	b.n	8001d98 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d07f      	beq.n	8001d96 <HCD_RXQLVL_IRQHandler+0x14a>
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	440b      	add	r3, r1
 8001ca4:	3344      	adds	r3, #68	; 0x44
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d074      	beq.n	8001d96 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3344      	adds	r3, #68	; 0x44
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	b292      	uxth	r2, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f000 fd78 	bl	80027bc <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	440b      	add	r3, r1
 8001cda:	3344      	adds	r3, #68	; 0x44
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	18d1      	adds	r1, r2, r3
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4403      	add	r3, r0
 8001cf0:	3344      	adds	r3, #68	; 0x44
 8001cf2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	440b      	add	r3, r1
 8001d02:	334c      	adds	r3, #76	; 0x4c
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	18d1      	adds	r1, r2, r3
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4403      	add	r3, r0
 8001d18:	334c      	adds	r3, #76	; 0x4c
 8001d1a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	015a      	lsls	r2, r3, #5
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	4413      	add	r3, r2
 8001d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HCD_RXQLVL_IRQHandler+0x154>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d031      	beq.n	8001d96 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	015a      	lsls	r2, r3, #5
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d48:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d50:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	015a      	lsls	r2, r3, #5
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	3350      	adds	r3, #80	; 0x50
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	f083 0301 	eor.w	r3, r3, #1
 8001d7a:	b2d8      	uxtb	r0, r3
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	440b      	add	r3, r1
 8001d8a:	3350      	adds	r3, #80	; 0x50
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	701a      	strb	r2, [r3, #0]
      break;
 8001d90:	e001      	b.n	8001d96 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8001d92:	bf00      	nop
 8001d94:	e000      	b.n	8001d98 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8001d96:	bf00      	nop
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3728      	adds	r7, #40	; 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	1ff80000 	.word	0x1ff80000

08001da4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001dd0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d10b      	bne.n	8001df4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d102      	bne.n	8001dec <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 ffaf 	bl	8002d4a <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f043 0302 	orr.w	r3, r3, #2
 8001df2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d132      	bne.n	8001e64 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d126      	bne.n	8001e5e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d113      	bne.n	8001e40 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001e1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e22:	d106      	bne.n	8001e32 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2102      	movs	r1, #2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fd10 	bl	8002850 <USB_InitFSLSPClkSel>
 8001e30:	e011      	b.n	8001e56 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2101      	movs	r1, #1
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 fd09 	bl	8002850 <USB_InitFSLSPClkSel>
 8001e3e:	e00a      	b.n	8001e56 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d106      	bne.n	8001e56 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001e54:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 ffa1 	bl	8002d9e <HAL_HCD_PortEnabled_Callback>
 8001e5c:	e002      	b.n	8001e64 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 ffab 	bl	8002dba <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	2b20      	cmp	r3, #32
 8001e6c:	d103      	bne.n	8001e76 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f043 0320 	orr.w	r3, r3, #32
 8001e74:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	6013      	str	r3, [r2, #0]
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e25b      	b.n	8002356 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d075      	beq.n	8001f96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eaa:	4ba3      	ldr	r3, [pc, #652]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d00c      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb6:	4ba0      	ldr	r3, [pc, #640]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d112      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec2:	4b9d      	ldr	r3, [pc, #628]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ece:	d10b      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed0:	4b99      	ldr	r3, [pc, #612]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d05b      	beq.n	8001f94 <HAL_RCC_OscConfig+0x108>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d157      	bne.n	8001f94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e236      	b.n	8002356 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef0:	d106      	bne.n	8001f00 <HAL_RCC_OscConfig+0x74>
 8001ef2:	4b91      	ldr	r3, [pc, #580]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a90      	ldr	r2, [pc, #576]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e01d      	b.n	8001f3c <HAL_RCC_OscConfig+0xb0>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x98>
 8001f0a:	4b8b      	ldr	r3, [pc, #556]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a8a      	ldr	r2, [pc, #552]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	4b88      	ldr	r3, [pc, #544]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a87      	ldr	r2, [pc, #540]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e00b      	b.n	8001f3c <HAL_RCC_OscConfig+0xb0>
 8001f24:	4b84      	ldr	r3, [pc, #528]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a83      	ldr	r2, [pc, #524]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	4b81      	ldr	r3, [pc, #516]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a80      	ldr	r2, [pc, #512]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d013      	beq.n	8001f6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7fe fc86 	bl	8000854 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7fe fc82 	bl	8000854 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	; 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e1fb      	b.n	8002356 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	4b76      	ldr	r3, [pc, #472]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0xc0>
 8001f6a:	e014      	b.n	8001f96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7fe fc72 	bl	8000854 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f74:	f7fe fc6e 	bl	8000854 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	; 0x64
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e1e7      	b.n	8002356 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f86:	4b6c      	ldr	r3, [pc, #432]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0xe8>
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d063      	beq.n	800206a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fa2:	4b65      	ldr	r3, [pc, #404]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fae:	4b62      	ldr	r3, [pc, #392]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d11c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fba:	4b5f      	ldr	r3, [pc, #380]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d116      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	4b5c      	ldr	r3, [pc, #368]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_RCC_OscConfig+0x152>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e1bb      	b.n	8002356 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fde:	4b56      	ldr	r3, [pc, #344]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4952      	ldr	r1, [pc, #328]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	e03a      	b.n	800206a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d020      	beq.n	800203e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ffc:	4b4f      	ldr	r3, [pc, #316]	; (800213c <HAL_RCC_OscConfig+0x2b0>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7fe fc27 	bl	8000854 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200a:	f7fe fc23 	bl	8000854 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e19c      	b.n	8002356 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201c:	4b46      	ldr	r3, [pc, #280]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002028:	4b43      	ldr	r3, [pc, #268]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4940      	ldr	r1, [pc, #256]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]
 800203c:	e015      	b.n	800206a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203e:	4b3f      	ldr	r3, [pc, #252]	; (800213c <HAL_RCC_OscConfig+0x2b0>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe fc06 	bl	8000854 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800204c:	f7fe fc02 	bl	8000854 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e17b      	b.n	8002356 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	4b36      	ldr	r3, [pc, #216]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d030      	beq.n	80020d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207e:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_RCC_OscConfig+0x2b4>)
 8002080:	2201      	movs	r2, #1
 8002082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7fe fbe6 	bl	8000854 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800208c:	f7fe fbe2 	bl	8000854 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e15b      	b.n	8002356 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209e:	4b26      	ldr	r3, [pc, #152]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x200>
 80020aa:	e015      	b.n	80020d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ac:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_RCC_OscConfig+0x2b4>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b2:	f7fe fbcf 	bl	8000854 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ba:	f7fe fbcb 	bl	8000854 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e144      	b.n	8002356 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 80020ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80a0 	beq.w	8002226 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ea:	4b13      	ldr	r3, [pc, #76]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10f      	bne.n	8002116 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a0e      	ldr	r2, [pc, #56]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_OscConfig+0x2b8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d121      	bne.n	8002166 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <HAL_RCC_OscConfig+0x2b8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a07      	ldr	r2, [pc, #28]	; (8002144 <HAL_RCC_OscConfig+0x2b8>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7fe fb91 	bl	8000854 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	e011      	b.n	800215a <HAL_RCC_OscConfig+0x2ce>
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800
 800213c:	42470000 	.word	0x42470000
 8002140:	42470e80 	.word	0x42470e80
 8002144:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002148:	f7fe fb84 	bl	8000854 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e0fd      	b.n	8002356 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215a:	4b81      	ldr	r3, [pc, #516]	; (8002360 <HAL_RCC_OscConfig+0x4d4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d106      	bne.n	800217c <HAL_RCC_OscConfig+0x2f0>
 800216e:	4b7d      	ldr	r3, [pc, #500]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	4a7c      	ldr	r2, [pc, #496]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6713      	str	r3, [r2, #112]	; 0x70
 800217a:	e01c      	b.n	80021b6 <HAL_RCC_OscConfig+0x32a>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b05      	cmp	r3, #5
 8002182:	d10c      	bne.n	800219e <HAL_RCC_OscConfig+0x312>
 8002184:	4b77      	ldr	r3, [pc, #476]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	4a76      	ldr	r2, [pc, #472]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	6713      	str	r3, [r2, #112]	; 0x70
 8002190:	4b74      	ldr	r3, [pc, #464]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	4a73      	ldr	r2, [pc, #460]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6713      	str	r3, [r2, #112]	; 0x70
 800219c:	e00b      	b.n	80021b6 <HAL_RCC_OscConfig+0x32a>
 800219e:	4b71      	ldr	r3, [pc, #452]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	4a70      	ldr	r2, [pc, #448]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	6713      	str	r3, [r2, #112]	; 0x70
 80021aa:	4b6e      	ldr	r3, [pc, #440]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	4a6d      	ldr	r2, [pc, #436]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 80021b0:	f023 0304 	bic.w	r3, r3, #4
 80021b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d015      	beq.n	80021ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021be:	f7fe fb49 	bl	8000854 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c6:	f7fe fb45 	bl	8000854 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e0bc      	b.n	8002356 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021dc:	4b61      	ldr	r3, [pc, #388]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 80021de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0ee      	beq.n	80021c6 <HAL_RCC_OscConfig+0x33a>
 80021e8:	e014      	b.n	8002214 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ea:	f7fe fb33 	bl	8000854 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f0:	e00a      	b.n	8002208 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7fe fb2f 	bl	8000854 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0a6      	b.n	8002356 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002208:	4b56      	ldr	r3, [pc, #344]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1ee      	bne.n	80021f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002214:	7dfb      	ldrb	r3, [r7, #23]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d105      	bne.n	8002226 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221a:	4b52      	ldr	r3, [pc, #328]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a51      	ldr	r2, [pc, #324]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 8002220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8092 	beq.w	8002354 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002230:	4b4c      	ldr	r3, [pc, #304]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b08      	cmp	r3, #8
 800223a:	d05c      	beq.n	80022f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d141      	bne.n	80022c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002244:	4b48      	ldr	r3, [pc, #288]	; (8002368 <HAL_RCC_OscConfig+0x4dc>)
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7fe fb03 	bl	8000854 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002252:	f7fe faff 	bl	8000854 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e078      	b.n	8002356 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002264:	4b3f      	ldr	r3, [pc, #252]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f0      	bne.n	8002252 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69da      	ldr	r2, [r3, #28]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	019b      	lsls	r3, r3, #6
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	085b      	lsrs	r3, r3, #1
 8002288:	3b01      	subs	r3, #1
 800228a:	041b      	lsls	r3, r3, #16
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	061b      	lsls	r3, r3, #24
 8002294:	4933      	ldr	r1, [pc, #204]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800229a:	4b33      	ldr	r3, [pc, #204]	; (8002368 <HAL_RCC_OscConfig+0x4dc>)
 800229c:	2201      	movs	r2, #1
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7fe fad8 	bl	8000854 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a8:	f7fe fad4 	bl	8000854 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e04d      	b.n	8002356 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ba:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0x41c>
 80022c6:	e045      	b.n	8002354 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <HAL_RCC_OscConfig+0x4dc>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7fe fac1 	bl	8000854 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d6:	f7fe fabd 	bl	8000854 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e036      	b.n	8002356 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e8:	4b1e      	ldr	r3, [pc, #120]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f0      	bne.n	80022d6 <HAL_RCC_OscConfig+0x44a>
 80022f4:	e02e      	b.n	8002354 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e029      	b.n	8002356 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002302:	4b18      	ldr	r3, [pc, #96]	; (8002364 <HAL_RCC_OscConfig+0x4d8>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	429a      	cmp	r2, r3
 8002314:	d11c      	bne.n	8002350 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002320:	429a      	cmp	r2, r3
 8002322:	d115      	bne.n	8002350 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800232a:	4013      	ands	r3, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002330:	4293      	cmp	r3, r2
 8002332:	d10d      	bne.n	8002350 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d106      	bne.n	8002350 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40007000 	.word	0x40007000
 8002364:	40023800 	.word	0x40023800
 8002368:	42470060 	.word	0x42470060

0800236c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0cc      	b.n	800251a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002380:	4b68      	ldr	r3, [pc, #416]	; (8002524 <HAL_RCC_ClockConfig+0x1b8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d90c      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238e:	4b65      	ldr	r3, [pc, #404]	; (8002524 <HAL_RCC_ClockConfig+0x1b8>)
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b63      	ldr	r3, [pc, #396]	; (8002524 <HAL_RCC_ClockConfig+0x1b8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0b8      	b.n	800251a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d020      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c0:	4b59      	ldr	r3, [pc, #356]	; (8002528 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4a58      	ldr	r2, [pc, #352]	; (8002528 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d8:	4b53      	ldr	r3, [pc, #332]	; (8002528 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	4a52      	ldr	r2, [pc, #328]	; (8002528 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e4:	4b50      	ldr	r3, [pc, #320]	; (8002528 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	494d      	ldr	r1, [pc, #308]	; (8002528 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d044      	beq.n	800248c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b47      	ldr	r3, [pc, #284]	; (8002528 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d119      	bne.n	800244a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e07f      	b.n	800251a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d003      	beq.n	800242a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002426:	2b03      	cmp	r3, #3
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242a:	4b3f      	ldr	r3, [pc, #252]	; (8002528 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e06f      	b.n	800251a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243a:	4b3b      	ldr	r3, [pc, #236]	; (8002528 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e067      	b.n	800251a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244a:	4b37      	ldr	r3, [pc, #220]	; (8002528 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f023 0203 	bic.w	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4934      	ldr	r1, [pc, #208]	; (8002528 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	4313      	orrs	r3, r2
 800245a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800245c:	f7fe f9fa 	bl	8000854 <HAL_GetTick>
 8002460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	e00a      	b.n	800247a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002464:	f7fe f9f6 	bl	8000854 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e04f      	b.n	800251a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	4b2b      	ldr	r3, [pc, #172]	; (8002528 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 020c 	and.w	r2, r3, #12
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	429a      	cmp	r2, r3
 800248a:	d1eb      	bne.n	8002464 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800248c:	4b25      	ldr	r3, [pc, #148]	; (8002524 <HAL_RCC_ClockConfig+0x1b8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d20c      	bcs.n	80024b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b22      	ldr	r3, [pc, #136]	; (8002524 <HAL_RCC_ClockConfig+0x1b8>)
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b20      	ldr	r3, [pc, #128]	; (8002524 <HAL_RCC_ClockConfig+0x1b8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e032      	b.n	800251a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c0:	4b19      	ldr	r3, [pc, #100]	; (8002528 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4916      	ldr	r1, [pc, #88]	; (8002528 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024de:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	490e      	ldr	r1, [pc, #56]	; (8002528 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024f2:	f000 f821 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 80024f6:	4601      	mov	r1, r0
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	5cd3      	ldrb	r3, [r2, r3]
 8002506:	fa21 f303 	lsr.w	r3, r1, r3
 800250a:	4a09      	ldr	r2, [pc, #36]	; (8002530 <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_RCC_ClockConfig+0x1c8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe f95a 	bl	80007cc <HAL_InitTick>

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40023c00 	.word	0x40023c00
 8002528:	40023800 	.word	0x40023800
 800252c:	08002ec4 	.word	0x08002ec4
 8002530:	20000000 	.word	0x20000000
 8002534:	20000004 	.word	0x20000004

08002538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	2300      	movs	r3, #0
 8002548:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800254e:	4b63      	ldr	r3, [pc, #396]	; (80026dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b04      	cmp	r3, #4
 8002558:	d007      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0x32>
 800255a:	2b08      	cmp	r3, #8
 800255c:	d008      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x38>
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 80b4 	bne.w	80026cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002564:	4b5e      	ldr	r3, [pc, #376]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002566:	60bb      	str	r3, [r7, #8]
       break;
 8002568:	e0b3      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800256a:	4b5e      	ldr	r3, [pc, #376]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800256c:	60bb      	str	r3, [r7, #8]
      break;
 800256e:	e0b0      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002570:	4b5a      	ldr	r3, [pc, #360]	; (80026dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002578:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800257a:	4b58      	ldr	r3, [pc, #352]	; (80026dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d04a      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002586:	4b55      	ldr	r3, [pc, #340]	; (80026dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	099b      	lsrs	r3, r3, #6
 800258c:	f04f 0400 	mov.w	r4, #0
 8002590:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	ea03 0501 	and.w	r5, r3, r1
 800259c:	ea04 0602 	and.w	r6, r4, r2
 80025a0:	4629      	mov	r1, r5
 80025a2:	4632      	mov	r2, r6
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	f04f 0400 	mov.w	r4, #0
 80025ac:	0154      	lsls	r4, r2, #5
 80025ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025b2:	014b      	lsls	r3, r1, #5
 80025b4:	4619      	mov	r1, r3
 80025b6:	4622      	mov	r2, r4
 80025b8:	1b49      	subs	r1, r1, r5
 80025ba:	eb62 0206 	sbc.w	r2, r2, r6
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	f04f 0400 	mov.w	r4, #0
 80025c6:	0194      	lsls	r4, r2, #6
 80025c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025cc:	018b      	lsls	r3, r1, #6
 80025ce:	1a5b      	subs	r3, r3, r1
 80025d0:	eb64 0402 	sbc.w	r4, r4, r2
 80025d4:	f04f 0100 	mov.w	r1, #0
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	00e2      	lsls	r2, r4, #3
 80025de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025e2:	00d9      	lsls	r1, r3, #3
 80025e4:	460b      	mov	r3, r1
 80025e6:	4614      	mov	r4, r2
 80025e8:	195b      	adds	r3, r3, r5
 80025ea:	eb44 0406 	adc.w	r4, r4, r6
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	0262      	lsls	r2, r4, #9
 80025f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80025fc:	0259      	lsls	r1, r3, #9
 80025fe:	460b      	mov	r3, r1
 8002600:	4614      	mov	r4, r2
 8002602:	4618      	mov	r0, r3
 8002604:	4621      	mov	r1, r4
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f04f 0400 	mov.w	r4, #0
 800260c:	461a      	mov	r2, r3
 800260e:	4623      	mov	r3, r4
 8002610:	f7fd fdda 	bl	80001c8 <__aeabi_uldivmod>
 8002614:	4603      	mov	r3, r0
 8002616:	460c      	mov	r4, r1
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	e049      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261c:	4b2f      	ldr	r3, [pc, #188]	; (80026dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	f04f 0400 	mov.w	r4, #0
 8002626:	f240 11ff 	movw	r1, #511	; 0x1ff
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	ea03 0501 	and.w	r5, r3, r1
 8002632:	ea04 0602 	and.w	r6, r4, r2
 8002636:	4629      	mov	r1, r5
 8002638:	4632      	mov	r2, r6
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	f04f 0400 	mov.w	r4, #0
 8002642:	0154      	lsls	r4, r2, #5
 8002644:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002648:	014b      	lsls	r3, r1, #5
 800264a:	4619      	mov	r1, r3
 800264c:	4622      	mov	r2, r4
 800264e:	1b49      	subs	r1, r1, r5
 8002650:	eb62 0206 	sbc.w	r2, r2, r6
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	f04f 0400 	mov.w	r4, #0
 800265c:	0194      	lsls	r4, r2, #6
 800265e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002662:	018b      	lsls	r3, r1, #6
 8002664:	1a5b      	subs	r3, r3, r1
 8002666:	eb64 0402 	sbc.w	r4, r4, r2
 800266a:	f04f 0100 	mov.w	r1, #0
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	00e2      	lsls	r2, r4, #3
 8002674:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002678:	00d9      	lsls	r1, r3, #3
 800267a:	460b      	mov	r3, r1
 800267c:	4614      	mov	r4, r2
 800267e:	195b      	adds	r3, r3, r5
 8002680:	eb44 0406 	adc.w	r4, r4, r6
 8002684:	f04f 0100 	mov.w	r1, #0
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	02a2      	lsls	r2, r4, #10
 800268e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002692:	0299      	lsls	r1, r3, #10
 8002694:	460b      	mov	r3, r1
 8002696:	4614      	mov	r4, r2
 8002698:	4618      	mov	r0, r3
 800269a:	4621      	mov	r1, r4
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f04f 0400 	mov.w	r4, #0
 80026a2:	461a      	mov	r2, r3
 80026a4:	4623      	mov	r3, r4
 80026a6:	f7fd fd8f 	bl	80001c8 <__aeabi_uldivmod>
 80026aa:	4603      	mov	r3, r0
 80026ac:	460c      	mov	r4, r1
 80026ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	0c1b      	lsrs	r3, r3, #16
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	3301      	adds	r3, #1
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c8:	60bb      	str	r3, [r7, #8]
      break;
 80026ca:	e002      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026ce:	60bb      	str	r3, [r7, #8]
      break;
 80026d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d2:	68bb      	ldr	r3, [r7, #8]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026dc:	40023800 	.word	0x40023800
 80026e0:	00f42400 	.word	0x00f42400
 80026e4:	007a1200 	.word	0x007a1200

080026e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f023 0201 	bic.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	019b      	lsls	r3, r3, #6
 800273e:	f043 0220 	orr.w	r2, r3, #32
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3301      	adds	r3, #1
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4a09      	ldr	r2, [pc, #36]	; (8002774 <USB_FlushTxFifo+0x48>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d901      	bls.n	8002758 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e006      	b.n	8002766 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b20      	cmp	r3, #32
 8002762:	d0f0      	beq.n	8002746 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	00030d40 	.word	0x00030d40

08002778 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2210      	movs	r2, #16
 8002788:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3301      	adds	r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <USB_FlushRxFifo+0x40>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e006      	b.n	80027aa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b10      	cmp	r3, #16
 80027a6:	d0f0      	beq.n	800278a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	00030d40 	.word	0x00030d40

080027bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80027bc:	b480      	push	{r7}
 80027be:	b089      	sub	sp, #36	; 0x24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	4613      	mov	r3, r2
 80027c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	3303      	adds	r3, #3
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	e00b      	b.n	80027f8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	3304      	adds	r3, #4
 80027f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	3301      	adds	r3, #1
 80027f6:	61bb      	str	r3, [r7, #24]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d3ef      	bcc.n	80027e0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8002800:	69fb      	ldr	r3, [r7, #28]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3724      	adds	r7, #36	; 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4013      	ands	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8002826:	68fb      	ldr	r3, [r7, #12]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f003 0301 	and.w	r3, r3, #1
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800286e:	f023 0303 	bic.w	r3, r3, #3
 8002872:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	68f9      	ldr	r1, [r7, #12]
 8002884:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d107      	bne.n	80028a2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002898:	461a      	mov	r2, r3
 800289a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800289e:	6053      	str	r3, [r2, #4]
 80028a0:	e009      	b.n	80028b6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d106      	bne.n	80028b6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028ae:	461a      	mov	r2, r3
 80028b0:	f241 7370 	movw	r3, #6000	; 0x1770
 80028b4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	b29b      	uxth	r3, r3
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b087      	sub	sp, #28
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4413      	add	r3, r2
 8002906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0c9b      	lsrs	r3, r3, #18
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <USB_HC_Halt+0x3a>
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d16c      	bne.n	80029fa <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	0151      	lsls	r1, r2, #5
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	440a      	add	r2, r1
 8002936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800293a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800293e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d143      	bne.n	80029d4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	0151      	lsls	r1, r2, #5
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	440a      	add	r2, r1
 8002962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002966:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800296a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	0151      	lsls	r1, r2, #5
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	440a      	add	r2, r1
 8002982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800298a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4413      	add	r3, r2
 8002994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	0151      	lsls	r1, r2, #5
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	440a      	add	r2, r1
 80029a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80029aa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	3301      	adds	r3, #1
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029b8:	d81d      	bhi.n	80029f6 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029d0:	d0ec      	beq.n	80029ac <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80029d2:	e080      	b.n	8002ad6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	0151      	lsls	r1, r2, #5
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	440a      	add	r2, r1
 80029ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029f2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80029f4:	e06f      	b.n	8002ad6 <USB_HC_Halt+0x1f0>
          break;
 80029f6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80029f8:	e06d      	b.n	8002ad6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	0151      	lsls	r1, r2, #5
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	440a      	add	r2, r1
 8002a10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a18:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d143      	bne.n	8002ab2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	0151      	lsls	r1, r2, #5
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	440a      	add	r2, r1
 8002a40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a48:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	0151      	lsls	r1, r2, #5
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	440a      	add	r2, r1
 8002a60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a68:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	0151      	lsls	r1, r2, #5
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	440a      	add	r2, r1
 8002a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a88:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a96:	d81d      	bhi.n	8002ad4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aae:	d0ec      	beq.n	8002a8a <USB_HC_Halt+0x1a4>
 8002ab0:	e011      	b.n	8002ad6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	0151      	lsls	r1, r2, #5
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	440a      	add	r2, r1
 8002ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002acc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e000      	b.n	8002ad6 <USB_HC_Halt+0x1f0>
          break;
 8002ad4:	bf00      	nop
    }
  }

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	371c      	adds	r7, #28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff fe08 	bl	800270a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002afa:	2110      	movs	r1, #16
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff fe15 	bl	800272c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff fe38 	bl	8002778 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	e01f      	b.n	8002b4e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b24:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b34:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b42:	461a      	mov	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	2b0f      	cmp	r3, #15
 8002b52:	d9dc      	bls.n	8002b0e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	e034      	b.n	8002bc4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b70:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b78:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b80:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	3301      	adds	r3, #1
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ba0:	d80c      	bhi.n	8002bbc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bb8:	d0ec      	beq.n	8002b94 <USB_StopHost+0xb0>
 8002bba:	e000      	b.n	8002bbe <USB_StopHost+0xda>
        break;
 8002bbc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b0f      	cmp	r3, #15
 8002bc8:	d9c7      	bls.n	8002b5a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f04f 32ff 	mov.w	r2, #4294967295
 8002bde:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fd81 	bl	80026e8 <USB_EnableGlobalInt>

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f804 	bl	8002c14 <USBH_HandleSof>
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b0b      	cmp	r3, #11
 8002c24:	d10a      	bne.n	8002c3c <USBH_HandleSof+0x28>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8002c54:	bf00      	nop
}
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8002c70:	bf00      	nop
}
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f883 	bl	8002dd6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	791b      	ldrb	r3, [r3, #4]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f80b 	bl	8002cf2 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	795b      	ldrb	r3, [r3, #5]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f805 	bl	8002cf2 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	2b0a      	cmp	r3, #10
 8002d02:	d80d      	bhi.n	8002d20 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	33e0      	adds	r3, #224	; 0xe0
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	33e0      	adds	r3, #224	; 0xe0
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff57 	bl	8002bf0 <USBH_LL_IncTimer>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff8f 	bl	8002c7c <USBH_LL_Connect>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff98 	bl	8002caa <USBH_LL_Disconnect>
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	70fb      	strb	r3, [r7, #3]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff49 	bl	8002c44 <USBH_LL_PortEnabled>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff49 	bl	8002c60 <USBH_LL_PortDisabled>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd ff65 	bl	8000cbc <HAL_HCD_Stop>
 8002df2:	4603      	mov	r3, r0
 8002df4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 f807 	bl	8002e0c <USBH_Get_USB_Status>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002e02:	7bbb      	ldrb	r3, [r7, #14]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d817      	bhi.n	8002e50 <USBH_Get_USB_Status+0x44>
 8002e20:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <USBH_Get_USB_Status+0x1c>)
 8002e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e26:	bf00      	nop
 8002e28:	08002e39 	.word	0x08002e39
 8002e2c:	08002e3f 	.word	0x08002e3f
 8002e30:	08002e45 	.word	0x08002e45
 8002e34:	08002e4b 	.word	0x08002e4b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8002e3c:	e00b      	b.n	8002e56 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	73fb      	strb	r3, [r7, #15]
    break;
 8002e42:	e008      	b.n	8002e56 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
    break;
 8002e48:	e005      	b.n	8002e56 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	73fb      	strb	r3, [r7, #15]
    break;
 8002e4e:	e002      	b.n	8002e56 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8002e50:	2302      	movs	r3, #2
 8002e52:	73fb      	strb	r3, [r7, #15]
    break;
 8002e54:	bf00      	nop
  }
  return usb_status;
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <__libc_init_array>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	4e0d      	ldr	r6, [pc, #52]	; (8002e9c <__libc_init_array+0x38>)
 8002e68:	4c0d      	ldr	r4, [pc, #52]	; (8002ea0 <__libc_init_array+0x3c>)
 8002e6a:	1ba4      	subs	r4, r4, r6
 8002e6c:	10a4      	asrs	r4, r4, #2
 8002e6e:	2500      	movs	r5, #0
 8002e70:	42a5      	cmp	r5, r4
 8002e72:	d109      	bne.n	8002e88 <__libc_init_array+0x24>
 8002e74:	4e0b      	ldr	r6, [pc, #44]	; (8002ea4 <__libc_init_array+0x40>)
 8002e76:	4c0c      	ldr	r4, [pc, #48]	; (8002ea8 <__libc_init_array+0x44>)
 8002e78:	f000 f818 	bl	8002eac <_init>
 8002e7c:	1ba4      	subs	r4, r4, r6
 8002e7e:	10a4      	asrs	r4, r4, #2
 8002e80:	2500      	movs	r5, #0
 8002e82:	42a5      	cmp	r5, r4
 8002e84:	d105      	bne.n	8002e92 <__libc_init_array+0x2e>
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
 8002e88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e8c:	4798      	blx	r3
 8002e8e:	3501      	adds	r5, #1
 8002e90:	e7ee      	b.n	8002e70 <__libc_init_array+0xc>
 8002e92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e96:	4798      	blx	r3
 8002e98:	3501      	adds	r5, #1
 8002e9a:	e7f2      	b.n	8002e82 <__libc_init_array+0x1e>
 8002e9c:	08002edc 	.word	0x08002edc
 8002ea0:	08002edc 	.word	0x08002edc
 8002ea4:	08002edc 	.word	0x08002edc
 8002ea8:	08002ee0 	.word	0x08002ee0

08002eac <_init>:
 8002eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eae:	bf00      	nop
 8002eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb2:	bc08      	pop	{r3}
 8002eb4:	469e      	mov	lr, r3
 8002eb6:	4770      	bx	lr

08002eb8 <_fini>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	bf00      	nop
 8002ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ebe:	bc08      	pop	{r3}
 8002ec0:	469e      	mov	lr, r3
 8002ec2:	4770      	bx	lr
